// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`File Based - Full Integration Tests NRSRx Employee OData Microservice should generate files 1`] = `
Array [
  "employee-certification.form-group-fac.ts",
  "employee-certification.model.ts",
  "employee-certification.properties.ts",
  "employee-competency.form-group-fac.ts",
  "employee-competency.model.ts",
  "employee-competency.properties.ts",
  "employee-health-item.form-group-fac.ts",
  "employee-health-item.model.ts",
  "employee-health-item.properties.ts",
  "employee.form-group-fac.ts",
  "employee.model.ts",
  "employee.properties.ts",
  "endpoints.ts",
  "index.ts",
]
`;

exports[`File Based - Full Integration Tests NRSRx Employee OData Microservice should generate files: employee.form-group-fac.ts 1`] = `
"/* eslint-disable @typescript-eslint/no-unused-vars */
/* istanbul ignore file */
/**
 * This file is generated by the openapi-ts-generator
 * #form-group-factory.ts.hbs
 * For issues or feature request, visit the repo: https://github.com/ikemtz/openapi-ts-generator
 * Do not edit.
 */
import { FormControl, FormArray, FormGroup, Validators } from '@angular/forms'; //NOSONAR

export interface IEmployeeForm {
    id: new FormControl<string | null>;
    lastName: new FormControl<string>;
    firstName: new FormControl<string>;
    birthDate: new FormControl<Date | null>;
    mobilePhone: new FormControl<string | null>;
    homePhone: new FormControl<string | null>;
    photo: new FormControl<string | null>;
    email: new FormControl<string>;
    addressLine1: new FormControl<string | null>;
    addressLine2: new FormControl<string | null>;
    city: new FormControl<string | null>;
    state: new FormControl<string | null>;
    zip: new FormControl<string | null>;
    isEnabled: new FormControl<boolean>;
    hireDate: new FormControl<Date>;
    fireDate: new FormControl<Date | null>;
    totalHoursOfService: new FormControl<number | null>;
    certificationCount: new FormControl<number>;
    competencyCount: new FormControl<number>;
    healthItemCount: new FormControl<number>;
    employeeCertifications: new FormArray;
    employeeCompetencies: new FormArray;
    employeeHealthItems: new FormArray;
}

export function EmployeeFormGroupFac(): FormGroup<IEmployeeForm> {
  return new FormGroup<IEmployeeForm>({
    id: new FormControl<string | null>(null),
    lastName: new FormControl<string>('', { validators: Validators.compose([Validators.required, Validators.maxLength(250)]), nonNullable: true }),
    firstName: new FormControl<string>('', { validators: Validators.compose([Validators.required, Validators.maxLength(250)]), nonNullable: true }),
    birthDate: new FormControl<Date | null>(null),
    mobilePhone: new FormControl<string | null>(null, { validators: Validators.maxLength(25) } ),
    homePhone: new FormControl<string | null>(null, { validators: Validators.maxLength(25) } ),
    photo: new FormControl<string | null>(null, { validators: Validators.maxLength(4000) } ),
    email: new FormControl<string>('', { validators: Validators.compose([Validators.required, Validators.maxLength(250)]), nonNullable: true }),
    addressLine1: new FormControl<string | null>(null, { validators: Validators.maxLength(250) } ),
    addressLine2: new FormControl<string | null>(null, { validators: Validators.maxLength(250) } ),
    city: new FormControl<string | null>(null, { validators: Validators.maxLength(150) } ),
    state: new FormControl<string | null>(null, { validators: Validators.compose([Validators.minLength(2), Validators.maxLength(2), Validators.pattern('^[A-Z]{2}$')]) }),
    zip: new FormControl<string | null>(null, { validators: Validators.maxLength(10) } ),
    isEnabled: new FormControl<boolean>(false, { validators: Validators.required, nonNullable: true } ),
    hireDate: new FormControl<Date>(new Date(), { validators: Validators.required, nonNullable: true } ),
    fireDate: new FormControl<Date | null>(null),
    totalHoursOfService: new FormControl<number | null>(null, { validators: Validators.min(0) } ),
    certificationCount: new FormControl<number>(0, { validators: Validators.compose([Validators.required, Validators.max(99)]), nonNullable: true }),
    competencyCount: new FormControl<number>(0, { validators: Validators.compose([Validators.required, Validators.min(0), Validators.max(99)]), nonNullable: true }),
    healthItemCount: new FormControl<number>(0, { validators: Validators.compose([Validators.required, Validators.min(0), Validators.max(99)]), nonNullable: true }),
    employeeCertifications: new FormArray([]),
    employeeCompetencies: new FormArray([]),
    employeeHealthItems: new FormArray([]),
  });
}
"
`;

exports[`File Based - Full Integration Tests NRSRx Employee OData Microservice should generate files: employee.model.ts 1`] = `
"/* istanbul ignore file */
/**
 * This file is generated by the openapi-ts-generator
 * #model.ts.hbs
 * For issues or feature request, visit the repo: https://github.com/ikemtz/openapi-ts-generator
 * Do not edit.
 */

import { IEmployeeCertification } from './employee-certification.model';
import { IEmployeeCompetency } from './employee-competency.model';
import { IEmployeeHealthItem } from './employee-health-item.model';

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface IEmployee {
  id?: string;
  lastName?: string;
  firstName?: string;
  birthDate?: Date;
  mobilePhone?: string;
  homePhone?: string;
  photo?: string;
  email?: string;
  addressLine1?: string;
  addressLine2?: string;
  city?: string;
  state?: string;
  zip?: string;
  isEnabled?: boolean;
  hireDate?: Date;
  fireDate?: Date;
  totalHoursOfService?: number;
  certificationCount?: number;
  competencyCount?: number;
  healthItemCount?: number;
  employeeCertifications?: IEmployeeCertification[];
  employeeCompetencies?: IEmployeeCompetency[];
  employeeHealthItems?: IEmployeeHealthItem[];
}
"
`;

exports[`File Based - Full Integration Tests NRSRx Employee OData Microservice should generate files: employee.properties.ts 1`] = `
"/* istanbul ignore file */
/**
 * This file is generated by the openapi-ts-generator
 * #model-properties.ts.hbs
 * For issues or feature request, visit the repo: https://github.com/ikemtz/openapi-ts-generator
 * Do not edit.
 */
/* tslint:disable */
export enum EmployeeProperties {
  ID = 'id',
  LAST_NAME = 'lastName',
  FIRST_NAME = 'firstName',
  BIRTH_DATE = 'birthDate',
  MOBILE_PHONE = 'mobilePhone',
  HOME_PHONE = 'homePhone',
  PHOTO = 'photo',
  EMAIL = 'email',
  ADDRESS_LINE_1 = 'addressLine1',
  ADDRESS_LINE_2 = 'addressLine2',
  CITY = 'city',
  STATE = 'state',
  ZIP = 'zip',
  IS_ENABLED = 'isEnabled',
  HIRE_DATE = 'hireDate',
  FIRE_DATE = 'fireDate',
  TOTAL_HOURS_OF_SERVICE = 'totalHoursOfService',
  CERTIFICATION_COUNT = 'certificationCount',
  COMPETENCY_COUNT = 'competencyCount',
  HEALTH_ITEM_COUNT = 'healthItemCount',
  EMPLOYEE_CERTIFICATIONS = 'employeeCertifications',
  EMPLOYEE_COMPETENCIES = 'employeeCompetencies',
  EMPLOYEE_HEALTH_ITEMS = 'employeeHealthItems',
}
"
`;

exports[`File Based - Full Integration Tests NRSRx Employee OData Microservice should generate files: employee-certification.form-group-fac.ts 1`] = `
"/* eslint-disable @typescript-eslint/no-unused-vars */
/* istanbul ignore file */
/**
 * This file is generated by the openapi-ts-generator
 * #form-group-factory.ts.hbs
 * For issues or feature request, visit the repo: https://github.com/ikemtz/openapi-ts-generator
 * Do not edit.
 */
import { FormControl, FormArray, FormGroup, Validators } from '@angular/forms'; //NOSONAR

export interface IEmployeeCertificationForm {
    id: new FormControl<string | null>;
    employeeId: new FormControl<string | null>;
    certificationId: new FormControl<string | null>;
    certificationName: new FormControl<string | null>;
    expiresOnUtc: new FormControl<Date | null>;
}

export function EmployeeCertificationFormGroupFac(): FormGroup<IEmployeeCertificationForm> {
  return new FormGroup<IEmployeeCertificationForm>({
    id: new FormControl<string | null>(null),
    employeeId: new FormControl<string | null>(null),
    certificationId: new FormControl<string | null>(null),
    certificationName: new FormControl<string | null>(null),
    expiresOnUtc: new FormControl<Date | null>(null),
  });
}
"
`;

exports[`File Based - Full Integration Tests NRSRx Employee OData Microservice should generate files: employee-certification.model.ts 1`] = `
"/* istanbul ignore file */
/**
 * This file is generated by the openapi-ts-generator
 * #model.ts.hbs
 * For issues or feature request, visit the repo: https://github.com/ikemtz/openapi-ts-generator
 * Do not edit.
 */
// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface IEmployeeCertification {
  id?: string;
  employeeId?: string;
  certificationId?: string;
  certificationName?: string;
  expiresOnUtc?: Date;
}
"
`;

exports[`File Based - Full Integration Tests NRSRx Employee OData Microservice should generate files: employee-certification.properties.ts 1`] = `
"/* istanbul ignore file */
/**
 * This file is generated by the openapi-ts-generator
 * #model-properties.ts.hbs
 * For issues or feature request, visit the repo: https://github.com/ikemtz/openapi-ts-generator
 * Do not edit.
 */
/* tslint:disable */
export enum EmployeeCertificationProperties {
  ID = 'id',
  EMPLOYEE_ID = 'employeeId',
  CERTIFICATION_ID = 'certificationId',
  CERTIFICATION_NAME = 'certificationName',
  EXPIRES_ON_UTC = 'expiresOnUtc',
}
"
`;

exports[`File Based - Full Integration Tests NRSRx Employee OData Microservice should generate files: employee-competency.form-group-fac.ts 1`] = `
"/* eslint-disable @typescript-eslint/no-unused-vars */
/* istanbul ignore file */
/**
 * This file is generated by the openapi-ts-generator
 * #form-group-factory.ts.hbs
 * For issues or feature request, visit the repo: https://github.com/ikemtz/openapi-ts-generator
 * Do not edit.
 */
import { FormControl, FormArray, FormGroup, Validators } from '@angular/forms'; //NOSONAR

export interface IEmployeeCompetencyForm {
    id: new FormControl<string | null>;
    employeeId: new FormControl<string | null>;
    competencyId: new FormControl<string | null>;
    competencyName: new FormControl<string | null>;
    expiresOnUtc: new FormControl<Date | null>;
    isEnabled: new FormControl<boolean | null>;
}

export function EmployeeCompetencyFormGroupFac(): FormGroup<IEmployeeCompetencyForm> {
  return new FormGroup<IEmployeeCompetencyForm>({
    id: new FormControl<string | null>(null),
    employeeId: new FormControl<string | null>(null),
    competencyId: new FormControl<string | null>(null),
    competencyName: new FormControl<string | null>(null),
    expiresOnUtc: new FormControl<Date | null>(null),
    isEnabled: new FormControl<boolean | null>(null),
  });
}
"
`;

exports[`File Based - Full Integration Tests NRSRx Employee OData Microservice should generate files: employee-competency.model.ts 1`] = `
"/* istanbul ignore file */
/**
 * This file is generated by the openapi-ts-generator
 * #model.ts.hbs
 * For issues or feature request, visit the repo: https://github.com/ikemtz/openapi-ts-generator
 * Do not edit.
 */
// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface IEmployeeCompetency {
  id?: string;
  employeeId?: string;
  competencyId?: string;
  competencyName?: string;
  expiresOnUtc?: Date;
  isEnabled?: boolean;
}
"
`;

exports[`File Based - Full Integration Tests NRSRx Employee OData Microservice should generate files: employee-competency.properties.ts 1`] = `
"/* istanbul ignore file */
/**
 * This file is generated by the openapi-ts-generator
 * #model-properties.ts.hbs
 * For issues or feature request, visit the repo: https://github.com/ikemtz/openapi-ts-generator
 * Do not edit.
 */
/* tslint:disable */
export enum EmployeeCompetencyProperties {
  ID = 'id',
  EMPLOYEE_ID = 'employeeId',
  COMPETENCY_ID = 'competencyId',
  COMPETENCY_NAME = 'competencyName',
  EXPIRES_ON_UTC = 'expiresOnUtc',
  IS_ENABLED = 'isEnabled',
}
"
`;

exports[`File Based - Full Integration Tests NRSRx Employee OData Microservice should generate files: employee-health-item.form-group-fac.ts 1`] = `
"/* eslint-disable @typescript-eslint/no-unused-vars */
/* istanbul ignore file */
/**
 * This file is generated by the openapi-ts-generator
 * #form-group-factory.ts.hbs
 * For issues or feature request, visit the repo: https://github.com/ikemtz/openapi-ts-generator
 * Do not edit.
 */
import { FormControl, FormArray, FormGroup, Validators } from '@angular/forms'; //NOSONAR

export interface IEmployeeHealthItemForm {
    id: new FormControl<string | null>;
    employeeId: new FormControl<string | null>;
    healthItemId: new FormControl<string | null>;
    healthItemName: new FormControl<string | null>;
    expiresOnUtc: new FormControl<Date | null>;
    isEnabled: new FormControl<boolean | null>;
}

export function EmployeeHealthItemFormGroupFac(): FormGroup<IEmployeeHealthItemForm> {
  return new FormGroup<IEmployeeHealthItemForm>({
    id: new FormControl<string | null>(null),
    employeeId: new FormControl<string | null>(null),
    healthItemId: new FormControl<string | null>(null),
    healthItemName: new FormControl<string | null>(null),
    expiresOnUtc: new FormControl<Date | null>(null),
    isEnabled: new FormControl<boolean | null>(null),
  });
}
"
`;

exports[`File Based - Full Integration Tests NRSRx Employee OData Microservice should generate files: employee-health-item.model.ts 1`] = `
"/* istanbul ignore file */
/**
 * This file is generated by the openapi-ts-generator
 * #model.ts.hbs
 * For issues or feature request, visit the repo: https://github.com/ikemtz/openapi-ts-generator
 * Do not edit.
 */
// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface IEmployeeHealthItem {
  id?: string;
  employeeId?: string;
  healthItemId?: string;
  healthItemName?: string;
  expiresOnUtc?: Date;
  isEnabled?: boolean;
}
"
`;

exports[`File Based - Full Integration Tests NRSRx Employee OData Microservice should generate files: employee-health-item.properties.ts 1`] = `
"/* istanbul ignore file */
/**
 * This file is generated by the openapi-ts-generator
 * #model-properties.ts.hbs
 * For issues or feature request, visit the repo: https://github.com/ikemtz/openapi-ts-generator
 * Do not edit.
 */
/* tslint:disable */
export enum EmployeeHealthItemProperties {
  ID = 'id',
  EMPLOYEE_ID = 'employeeId',
  HEALTH_ITEM_ID = 'healthItemId',
  HEALTH_ITEM_NAME = 'healthItemName',
  EXPIRES_ON_UTC = 'expiresOnUtc',
  IS_ENABLED = 'isEnabled',
}
"
`;

exports[`File Based - Full Integration Tests NRSRx Employee OData Microservice should generate files: endpoints.ts 1`] = `
"/* istanbul ignore file */
/**
 * This file is generated by the openapi-ts-generator
 * #endpoints-ts.hbs
 * For issues or feature request, visit the repo: https://github.com/ikemtz/openapi-ts-generator
 * Do not edit.
 */
/* tslint:disable */
export enum Endpoints {
  employees = '/odata/v1/Employees',
}
export interface IEndpoints {
  readonly employees: string;
}
"
`;

exports[`File Based - Full Integration Tests NRSRx Employee OData Microservice should generate files: index.ts 1`] = `
"/* istanbul ignore file */
/**
 * This file is generated by the openapi-ts-generator
 * #generate-barrel-ts.hbs
 * For issues or feature request, visit the repo: https://github.com/ikemtz/openapi-ts-generator
 * Do not edit.
 */
/* tslint:disable */
export * from './employee-certification.form-group-fac';
export * from './employee-certification.model';
export * from './employee-certification.properties';
export * from './employee-competency.form-group-fac';
export * from './employee-competency.model';
export * from './employee-competency.properties';
export * from './employee-health-item.form-group-fac';
export * from './employee-health-item.model';
export * from './employee-health-item.properties';
export * from './employee.form-group-fac';
export * from './employee.model';
export * from './employee.properties';
"
`;
